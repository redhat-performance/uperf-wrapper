#!/bin/bash
#
#                         License
#
# Copyright (C) 2021  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#
# uperf_run automates the execution of the uperf test.
#
arguments="$@"

if [ ! -f "uperf.out" ]; then
        command="${0} ${@}"
        echo $command
        script -c "${command}" uperf.out
        exit $?
fi

curdir=`pwd`
if [[ $0 == "./"* ]]; then
	chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
	if [[ $chars == 1 ]]; then
		run_dir=`pwd`
	else
		run_dir=`echo $0 | cut -d'/' -f 1-${chars} | cut -d'.' -f2-`
		run_dir="${curdir}${run_dir}"
	fi
else
	chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
	run_dir=`echo $0 | cut -d'/' -f 1-${chars}`
fi

test_name="uperf"

source .bashrc

results_file_worker=""
execution_time=60
iterations=1
packet_size="64,16384"
numb_jobs="1,8,16,32,64"
packet_type="udp,tcp"
tests="stream,rr,bidirec,maerts"
uperf_results=""
results_file=""
results_suffix=""
networks_to_run="1,2,3,4,6,8,12,16,20,24,28,32"
client_ip_list=""
server_ip_list=""
njobs=""
packet_type=""
packet_size=""
nets=""
net_count=""
network_count=""
test_iterations=""
test_case=""
packets_do=""
packet_size_do=""
numb_jobs_do=""
networks=""
networks_using=""
number_networks=0
max_stddev=""
server_ips=""
client_ips=""
results_prefix=""
use_pbench_version=0
time_delay=0

#
# User specific code here.
#

usage()
{
	echo Usage ${1}:
	echo "  --client_ips: comma separated list of the client ip addresses"
	echo "  --max_stddev: standard deviation of the pbench uperf runs"
	echo "  --networks_to_run: how many networks are we to run."
	echo "  --numb_jobs: comma separated list of the number of jobs per network to run"
	echo "  --packet_sizes: comma separated list of packet sizes, (in bytes)"
	echo "  --packet_type:  comma separated list of packet types, (tcp,udp)"
	echo "  --server_ips: comma separated list of the server ip addresses"
	echo "  --suffix: Suffix to add to the results file"
	echo "  --test_types:  stream,rr,maerts,bidirec"
	echo "  --time:  number of seconds to run the test for"
	echo "  --time_delay <x>: Delay x seconds before the next iteration is started."
	echo "  --tools_git: Pointer to the test_tools git.  Default is ${tools_git}.  Top directory is always test_tools"
	echo " --use_pbench_version: Instead of running the wrappers version"
	echo "     of linpack, use pbench-linpack when pbench is requested"
	source test_tools/general_setup --usage
}

uperf_start_remote()
{
	client_ip_list=`echo $client_ips | sed 's/,/ /g'`
	server_ip_list=`echo $server_ips | sed 's/,/ /g'`
	for client in $client_ip_list; do
		ssh -oStrictHostKeyChecking=no root@$client "ls /dev > /dev/null"
		scp -oStrictHostKeyChecking=no ${run_dir}/uperf_build root@$client:${to_home_root}/${to_user}/uperf_build
		ssh -oStrictHostKeyChecking=no root@$client "chmod 755 ${to_home_root}/${to_user}/uperf_build"
		ssh -oStrictHostKeyChecking=no root@$client "${to_home_root}/${to_user}/uperf_build ${to_home_root} ${to_user}"
		ssh -oStrictHostKeyChecking=no root@$client "systemctl stop firewalld"
		ssh -f -oStrictHostKeyChecking=no root@$client "nohup /usr/local/bin/uperf -s &"
	done
	sleep 30
}

#
# Standard location to pull the test_tools from.
#
# Variables set
#
# TOOLS_BIN: points to the tool directory
# to_home_root: home directory
# to_configuration: configuration information
# to_times_to_run: number of times to run the test
# to_pbench: Run the test via pbench
# to_puser: User running pbench
# to_run_label: Label for the run
# to_user: User on the test system running the test
# to_sys_type: for results info, basically aws, azure or local
# to_sysname: name of the system
# to_tuned_setting: tuned setting
#
tools_git=https://github.com/redhat-performance/test_tools-wrappers

#
# Clone the repo that contains the common code and tools
#

found=0
for arg in "$@"; do
	if [ $found -eq 1 ]; then
		#
		# Different test_tools location designated.
		#
		tools_git=$arg
		break;
	fi
	if [[ $arg == "--tools_git" ]]; then
		found=1
	fi
	if [[ $arg == "--usage" ]]; then
		#
		# Usage request present.  Note do not exit out, we will do that
		# in test_tools/general_setup
		# 
		usage $0
	fi
done

if [ ! -d "test_tools" ]; then
	#
	# Clone the tools if required.
	#
	git clone $tools_git test_tools
	if [ $? -ne 0 ]; then
		echo pulling git $tools_git failed.
		exit
	fi
fi

${curdir}/test_tools/gather_data ${curdir}
source test_tools/general_setup "$@"

#
# Reduce the data placing it into csv file format.
#


create_header()
{
	test_type=$1
	packet_type=$2
	packet_size=$3
	numb_nets=$4
	top_title=$5
	y_title=$6

	echo "test_type: $test_type"
	echo "packet_type: $packet_type"
	echo "packet_size: $packet_size"
}

record_data()
{
	rm dave*
	for file in `ls`; do
		results=`grep ^Total $file`
		echo $file
		protocal=`echo $file | cut -d'_' -f3 | cut -d'=' -f 2`
		op_type=`echo $file | cut -d'_' -f5 | cut -d'=' -f 2`
		packet_size=`echo $file | cut -d'_' -f6 | cut -d'=' -f 2`
		threads=`echo $file | cut -d'_' -f 4 | cut -d'=' -f 2`
		time=`echo $results | cut -d' ' -f 4`
		rate=`echo $results | cut -d' ' -f 6`
		ops=`echo $results | cut -d' ' -f 7`
		if [[ $rate == *"Mb"* ]]; then
			rate1=`echo $rate | sed "s/Mb\/s//g"`
			# djv
			echo rate $rate1
			rate=`echo "scale=2;$rate1/1024" | bc`
			rate="${rate}Gb/s"
		fi
		if [[ $rate == *"K"* ]]; then
			rate1=`echo $rate | sed "s/Kb\/s//g"`
			rate=`echo "scale=4;$rate1/1048576" | bc`
			rate="${rate}Gb/s"
		fi
		op1=`echo $ops | sed "s/op\/s//g"`
		latency=`echo "scale=6;1/${op1}" | bc`
		echo "${threads}:${time}:$rate:$ops:$latency:${protocal}:${op_type}:${packet_size}" >> dave.tmp
	done
	cat dave.tmp | sort -n > dave.sorted
	#
	# We are now ready to place data in the various graphs
	#
	# Graphs to do:
	# latency, trans/sec and GB/sec.  Note we do not filter out the
	# graphs, that is left for the user to d.
	#
	create_header $1 $2 $3 $4 Latency usec latency.csv
	echo Instance_Count:usec >> latency.csv
	create_header $1 $2 $3 $4 Transaction/second trans_sec iops.csv
	echo Instance_Count:trans_sec >> iops.csv
	create_header $1 $2 $3 $4 Bandwidth Gb_sec throughput.csv
	echo Instance_Count:GB_Sec >> throughput.csv
	#
	# Now populate the files
	#
	while IFS= read -r line
	do
		threads=`echo $line | cut -d: -f 1`
		bw=`echo $line | cut -d: -f 3 | sed "s/Gb\/s//g"`
		rest=`echo $line | cut -d: -f 6-8`
		iops=`echo $line | cut -d: -f 4 | sed "s/op\/s//g"`
		lat=`echo $line | cut -d: -f 5`
		echo $threads:$bw:$rest >> throughput.csv
		echo $threads:$iops:$rest >> iops.csv
		echo $threads:$lat:$rest >> latency.csv
	done < "dave.sorted"
	echo "" >> throughput.csv
	echo "" >> iops.csv
	echo "" >> latency.csv
	cat throughput.csv >> $working_dir/results_uperf.csv
	cat iops.csv >> $working_dir/results_uperf.csv
	cat latency.csv >> $working_dir/results_uperf.csv
}

organize_data()
{
	#
	# First get the op type
	#
	test_type=`ls summary_results_* | cut -d'_' -f 3 | sort -u`
	packet_type=`ls summary_results_* | cut -d'_' -f 5 | sort -u | cut -d'=' -f 2`
	packet_size=`ls summary_results_* | cut -d'_' -f 6 | sort -u | cut -d'=' -f 2`
	numb_nets=`ls summary_results_* | cut -d'_' -f 7 | sort -u | cut -d'=' -f 2`
	#
	# First make the heirchy and cp the appropriate files there.
	#
	rm -rf net_results
	working_dir=`pwd`
	mkdir net_results
	for tt in $test_type; do
		for pt in $packet_type; do
			for ps in $packet_size; do
				for nn in $numb_nets; do
					mkdir -p net_results/${tt}/${pt}/${ps}/${nn}
					cp summary_results_${tt}*pt=${pt}_ps=${ps}_nets=${nn}_iteration* net_results/${tt}/${pt}/${ps}/${nn}
				done
			done
		done
	done
	
	#
	# Now process the results
	#
	pushd net_results > /dev/null
	for tt in `ls`; do
		pushd $tt > /dev/null
		for pt in `ls`; do
			cd $pt
			for ps in `ls`; do
				cd $ps
				for nn in `ls`; do
					cd $nn
					record_data $tt $pt $ps $nn
					cd ..
				done
				cd ..
			done
			cd ..
		done
		popd > /dev/null
	done
	popd > /dev/null
}

build_xml()
{
	local_nthr=$1
	local_protocal=$2
	local_pk_size=$3
	local_test_host=$4
	local_instance=$5
	local_numb_networks=$6
	local_iteration=$7
	local_test_type=$8
	local_test_iteration=$9

	echo "<?xml version=\"1.0\"?>"  > xml${local_instance}
	echo "<profile name=\"${local_test_type}-${local_pk_size}B-${local_nthr}i\">" >> xml${local_instance}
	echo "  <group nthreads=\"${1}\">" >> xml${local_instance}
	case $local_test_type in
		rr)
			echo "    <transaction iterations=\"1\">" >> xml${local_instance}
			echo "      <flowop type=\"connect\" options=\"remotehost=${local_test_host} protocol=${local_protocal}\"/>" >> xml${local_instance}
			echo "    </transaction>" >> xml${local_instance}
			echo "    <transaction duration=\"${execution_time}s\">" >> xml${local_instance}
			echo "      <flowop type=\"write\" options=\"count=${local_nthr} size=${local_pk_size}\"/>" >> xml${local_instance}
			echo "      <flowop type=\"read\"  options=\"size=${local_pk_size}\"/>" >> xml${local_instance}
			echo "    <transaction iterations=\"1\">" >> xml${local_instance}
			echo "      <flowop type=\"disconnect\" />" >> xml${local_instance}
			echo "    </transaction>" >> xml${local_instance}
		;;
		stream|bidirec)
			echo "    <transaction iterations=\"1\">" >> xml${local_instance}
			echo "      <flowop type=\"connect\" options=\"remotehost=${local_test_host} protocol=${local_protocal}\"/>" >> xml${local_instance}
			echo "    </transaction>" >> xml${local_instance}
			echo "    <transaction duration=\"${execution_time}s\">" >> xml${local_instance}
			echo "      <flowop type=\"write\" options=\"count=${local_nthr} size=${local_pk_size}\"/>" >> xml${local_instance}
			echo "    </transaction>" >> xml${local_instance}
			echo "    <transaction iterations=\"1\">" >> xml${local_instance}
			echo "      <flowop type=\"disconnect\" />" >> xml${local_instance}
			echo "    </transaction>" >> xml${local_instance}
			;;
		maerts|bidirec)
			echo "    <transaction iterations=\"1\">" >> xml${local_instance}
			echo "      <flowop type=\"accept\" options=\"remotehost=${local_test_host} protocol=${local_protocal}\"/>" >> xml${local_instance}
			echo "    </transaction>" >> xml${local_instance}
			echo "    <transaction duration=\"${execution_time}s\">" >> xml${local_instance}
			echo "      <flowop type=\"read\" options=\"${local_nthr} size=${local_pk_size}\"/>" >> xml${local_instance}
			echo "    </transaction>" >> xml${local_instance}
			echo "    <transaction iterations=\"1\">" >> xml${local_instance}
			echo "      <flowop type=\"disconnect\" />" >> xml${local_instance}
			echo "    </transaction>" >> xml${local_instance}
			;;
	esac
	echo "  </group>" >> xml${local_instance}
	echo "</profile>" >> xml${local_instance}

	results_file="results_${local_test_type}_nj=${local_nthr}_pt=${local_protocal}_ps=${local_pk_size}_nets=${local_numb_networks}_iteration=${local_test_iteration}"
	if [ ${local_instance} -eq 1 ]; then
		results_file_worker="${results_file}_itera=${local_iteration}.${local_instance}_${results_suffix}"
	else
		results_file_worker="debug_${results_file}_itera=${local_iteration}.${local_instance}_${results_suffix}"
	fi
}

install_uperf()
{
	cd /$to_home_root/$to_user/workloads
	git clone https://github.com/uperf/uperf.git uperf
	cd uperf
	autoreconf -f -i
	./configure
	touch *
	make install
	cd
}

execute_test()
{
	net_file=""
	test_iteration=$1
	net_count=1
	network_list=`ifconfig -a | grep flags | cut -d: -f1`
	timestamp=`date +%u%t%T`

	for nets in $networks;do
		build_xml "${njobs}" "${packet_type}" "${packet_size}" "${nets}" "${net_count}" "${network_count}" "1" "${test_case}" "${test_iteration}"
		echo "# Time period: $timestamp" > $results_file_worker
		echo "/usr/local/bin/uperf -m xml${net_count} >> $results_file_worker"
		if [ $net_count -eq 1 ]; then
			net_file=${uperf_results}/${results_file_worker}_stats
			for nets in ${network_list}; do
				ethtool -S ${nets} > ${uperf_results}/net_stats_${nets}_iter_${test_iteration}.before
			done
		fi
		/usr/local/bin/uperf -m xml${net_count} >> $results_file_worker &
		pids[${net_count}]=$!
		let "net_count=$net_count+1"
	done
	# Adjust it down.
	for pid in ${pids[*]}; do
		wait $pid
	done
	for nets in ${network_list}; do
		ethtool -S ${nets} > ${uperf_results}/net_stats_${nets}_iter_${test_iteration}.after
	done
#
# Collapse results files now
#
	cat "${results_file}"*  >> ${uperf_results}/summary_${results_file}_${results_suffix}
	#
	# Report failures
	#
	if [ -f ${uperf_results}/summary_${results_file}_${results_suffix} ]; then
		lines=`wc -l ${uperf_results}/summary_${results_file}_${results_suffix} | cut -d' ' -f1`
	else
		lines=1
	fi
	echo $lines >> /tmp/debugging
	if [ $lines -eq 1 ]; then
		echo Failed >> ${uperf_results}/test_results_report
	else
		echo Ran >> ${uperf_results}/test_results_report
	fi
	cp ${results_file} ${uperf_results}
	rm -f "${results_file}"*
	rm -f debug*
	rm -f xml*
}

#
# Break the loops for the test into their own functions.  Doing so keeps the indentation
# under control.
#
test_iteration_loop()
{
	systemctl stop firewalld
	for test_iteration  in 1 `seq 2 1 $to_times_to_run`;
	do
		execute_test $test_iteration
		for client_ip in $client_ip_list; do
			ssh -oStrictHostKeyChecking=no $client_ip "pkill -9 uperf"
		done
		#
		# Restart uperf on the remote systems.
		#
		uperf_start_remote 
		if [ $time_delay -ne 0 ]; then
			echo sleeping for $time_delay
			sleep $time_delay
		fi
	done
}

packet_size_loop()
{
	for packet_size in $packet_size_do;do
		test_iteration_loop
	done
}

packet_type_loop()
{
	for packet_type in $packets_do;do
		packet_size_loop
	done
}

njobs_loop()
{
	for  njobs in $numb_jobs_do; do
		packet_type_loop
	done
}

client_ip_loop()
{
	for client_ip in $client_ip_list; do
		if [[ -z $networks ]]; then
			networks=$client_ip
			network_count=1
		else
			networks+=" "$client_ip
			let "network_count=$network_count+1"
		fi
		if [ $network_count -lt $networks_using ]; then
			continue
		fi
		if [ $network_count -gt $networks_using ]; then
			network_done=1;
		fi
		if [ $network_count -gt $number_networks ]; then
			network_done=1;
		fi
		if [ $network_done -eq 1 ]; then
			break
		fi
		njobs_loop
	done
}

network_list_loop()
{
	for networks_using in $network_list; do
		if [ $network_done -eq 1 ]; then
			break
		fi
		client_ip_loop
	done
}

#
# pbench operations
#
# Run pbench uperf with the appropriate options
#
run_pbench_uperf_test()
{
	if [ $use_pbench_version -eq 1 ]; then
		#
		# Get the number of ips.
		#
		server_ips_use=`echo $server_ips | cut -d',' -f1-$networks_to_run`
		client_ips_use=`echo $client_ips | cut -d',' -f1-$networks_to_run`
		echo pbench-uperf  -r $execution_time -m $packet_size -p tcp -i $numb_jobs -S $server_ips_use -C $client_ips_use --config=${to_tuned_setting} ${max_stddev} -t ${tests} >> /tmp/net_log
		#
		# Start the pbench uperf test.
		#
		pbench-uperf  -r $execution_time -m $packet_size -p $packet_type -i $numb_jobs -S $server_ips_use -C $client_ips_use --config=${to_tuned_setting} ${max_stddev} -t ${tests}
	else
		echo calling execute_via_pbench >> /tmp/debugging
		$TOOLS_BIN/execute_via_pbench --cmd_executing "$0" $arguments --test $test_name --spacing 11 --pbench_stats $to_pstats
		echo returned from execute_via_pbench >> /tmp/debugging
	fi
}

#
# Save the uperf results, both via pbench repo and tar file.
#
save_pbench_results()
{
	cd /var/lib/pbench-agent/
	mkdir export_uperf_data
	for i in `ls -d uperf_*`
	do
		mkdir export_uperf_data/$i
		cp $i/result.csv export_uperf_data/$i
		cp $i/result.txt export_uperf_data/$i
	done
	tar hcf /tmp/results_pbench_uperf_${to_tuned_setting}.tar export_uperf_data

	value=`$TOOLS_BIN/set_pbench_variables --host_config $to_configuration --sys_type $to_sys_type --test ${test_name} --pbench_user $to_puser --run_label $to_run_label`
	results_prefix=`echo $value | cut -d: -f 2`
	hostname=`echo $value | cut -d: -f 1`
	echo $TOOLS_BIN/pbench_copy_data --hostname "${hostname}" --user "${to_puser}" --prefix ${results_prefix} >> /tmp/debugging
	$TOOLS_BIN/pbench_copy_data --hostname "${hostname}" --user "${to_puser}" --prefix ${results_prefix}
}


ARGUMENT_LIST=(
	"client_ips"
	"max_stddev"
	"networks_to_run"
	"numb_jobs"
	"packet_sizes"
	"packet_type"
	"server_ips"
	"suffix"
	"tests"
	"time"
	"time_delay"
)

NO_ARGUMENTS=(
	"use_pbench_version"
)

# read arguments
opts=$(getopt \
	--longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
	--longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
	--name "$(basename "$0")" \
	--options "h" \
	-- "$@"
)

if [ $? -ne 0 ]; then
	exit
fi

eval set --$opts

while [[ $# -gt 0 ]]; do
	value=`echo $2 | sed "s/}//g"`
	case "${1}" in
		--client_ips)
			client_ips=$value
			shift 2
		;;
		--max_stddev)
			max_stddev="--max-stddev=${value}"
			shift 2
		;;
		--numb_jobs)
			numb_jobs=$value
			shift 2
		;;
		--packet_sizes)
			packet_size=$value
			shift 2
		;;
		--networks_to_run)
			networks_to_run=$value
			shift 2
		;;
		--packet_type)
			packet_type=$value
			shift 2
		;;
		--server_ips)
			server_ips=$value
			shift 2
		;;
		--suffix)
			results_suffix=$value
			shift 2
		;;
		--tests)
			temp=$value
			tests=`echo "$temp"|tr '\n' ' '`
			shift 2
		;;
		--time)
			execution_time=$value
			shift 2
		;;
		--time_delay)
			time_delay=$value
			shift 2
		;;
		--tools_git)
			tools_git=$value
			shift 2
		;;
		--use_pbench_version)
			use_pbench_version=1
			shift 1
		;;
		--)
			break
		;;
		*)
			echo $1 is bad option
			usage $0
		;;
	esac
done
shift $((OPTIND-1))

worker=`echo $server_ips | sed "s/,/ /g"`
number_networks=`echo $worker | wc -w`

#
# Install epel if RH and then handle locations, else build it.
#
${run_dir}/uperf_build $home_root $user

#
# Start uperf on the remote systems.
#
uperf_start_remote 


uperf_results=uperf_results_${results_suffix}_$(date "+%Y.%m.%d-%H.%M.%S")
mkdir ${uperf_results}

packets_do=`echo $packet_type | sed 's/,/ /g'`
packet_size_do=`echo $packet_size | sed 's/,/ /g'`
numb_jobs_do=`echo $numb_jobs | sed 's/,/ /g'`
test_types=`echo $tests | sed 's/,/ /g'`
networks=""
network_count=0

if [ $to_pbench -eq 0 ]; then
	
	network_list=`echo $networks_to_run | sed 's/,/ /g'`
	
	for test_case in $test_types; do
		networks=""
		network_count=0
		network_done=0
	
		network_list_loop
	done

	pushd $uperf_results
	organize_data
	popd
	${curdir}/test_tools/move_data $curdir $uperf_results
	cp ${curdir}/uperf.out $uperf_results
	tar hcf /tmp/results_uperf_${to_tuned_setting}.tar $uperf_results
else
	value=`$TOOLS_BIN/set_pbench_variables --host_config $to_configuration --sys_type $to_sys_type --test uperf --pbench_user $to_puser --run_label $to_run_label`
	hostname=`echo $value | cut -d: -f 1`
	export hostname
	results_prefix=`echo $value | cut -d: -f 2`

	user="user_"$to_puser

	run_pbench_uperf_test
	if [ $use_pbench_version -eq 1 ]; then
		save_pbench_results
	fi
fi
echo uperf completed >> /tmp/debugging
